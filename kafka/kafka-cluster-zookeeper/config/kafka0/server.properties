# -----------------------------系统相关配置-------------------------------------------------------------------------------------------------------
#这个表示当前broker在集群中的一个唯一标识，如果集群有3个broker，则分别为0，1，2
broker.id=0

#kafka存放数据的地方，如果要存放到多个地址的话用逗号分割 /tmp/kafka-log,/tmp/kafka-log2
log.dirs=/tmp/kafka_mounts/logs

#对外端口号
port=9092

#消息体的最大大小，单位是字节
message.max.bytes=1000000

#broker处理消息的最大线程数，一般情况下不需要修改
num.network.threads=3

#broker处理磁盘IO的线程数，应该大于你的硬盘数
num.io.threads=8

#后台任务处理的线程数，比如过期消息文件的删除等，一般情况下不需要修改
background.threads=4

#等待IO线程处理的请求队列最大数，如果等待IO的请求超过这个数值，就会停止接受外部消息，算是一种自我保护机制
queued.max.requests=500

#broker的主机地址，如果设置了就会绑定到这个地址，如果没有设置，会绑定到所有接口上，并将其中之一发送到zk，一般不设置
# host.name

##socket的发送缓冲区
# socket.send.buffer.bytes=100*1024

#socket的接受缓冲区
# socket.receive.buffer.bytes=100*1024

#socket请求的最大数值，防止内存溢出
# socket.request.max.bytes=100*1024*1024

# ---------------------------------LOG相关-------------------------------------
#topic的分区是一对segment文件存储的，这个控制每个segment的大小
# log.segment.bytes=1024*1024*1024

#这个参数会在segment还没有达到log.segment.bytes设置的大小，也会强制新建一个segment
# log.roll.hours=24*7

#日志的清理策略 有delete和compact，主要针对过期数据的处理
log.cleanup.policy=delete

#数据存储的最大时间，超过这个时间，会根据log.cleanup.policy设置的策略处理数据
# log.retention.minutes=7days

#指定日志每隔多久检查看是否可以被删除，默认1分钟
log.cleanup.interval.mins=1

#topic每个分区的最大文件大小，一个topic的大小限制=分区数*log.retention.bytes. -1表示没有大小限制
log.retention.bytes=-1

#文件大小检查周期时间，是否触发log.cleanup.policy中设置的策略
# log.retention.check.interval.ms=5minutes

#是否开启日志压缩
log.cleaner.enable=false

#日志压缩运行的线程数
log.cleaner.threads=1

#日志压缩时候处理的最大大小
# log.cleaner.io.max.bytes.per.second=None

#日志压缩去重时候的缓存空间，空间允许的情况下，越大越好
# log.cleaner.dedupe.buffer.size=500*1024*1024

#日志清理时候用到的IO块大小，一般不需要修改
# log.cleaner.io.buffer.size=512*1024

#日志清理中hash表的扩大因子，一般不需要修改
log.cleaner.io.buffer.load.factor=0.9

#检查是否触发日志清理的间隔
log.cleaner.backoff.ms=15000

#日志清理的频率控制，越大意味着更高效的清理，同时也会存在空间上的浪费
log.cleaner.min.cleanable.ratio=0.5

#对于压缩的日志保留的最长时间，和log.retention.minutes的区别是一个控制未压缩数据，一个控制压缩后数据
# log.cleaner.delete.retention.ms=1day

#对于segment日志的索引文件大小限制
# log.index.size.max.bytes=10 * 1024 * 1024

#执行一个fetch操作后，需要的一定的空间来扫描最近的offerset大小，设置越大，代表扫描速度越快，但是也更耗内存，不需要管这个参数
log.index.interval.bytes=4096

#log文件"sync"到磁盘之前累积的消息条数
# 因为磁盘IO操作是一个慢操作,但又是一个"数据可靠性"的必要手段
# 所以此参数的设置,需要在"数据可靠性"与"性能"之间做必要的权衡.
# 如果此值过大,将会导致每次"fsync"的时间较长(IO阻塞)
# 如果此值过小,将会导致"fsync"的次数较多,这也意味着整体的client请求有一定的延迟.
# 物理server故障,将会导致没有fsync的消息丢失.
# log.flush.interval.messages=None

#检查是否需要固化到硬盘的时间间隔
log.flush.scheduler.interval.ms=3000

#仅仅通过interval来控制消息的磁盘写入时机,是不足的.
# 此参数用于控制"fsync"的时间间隔,如果消息量始终没有达到阀值,但是离上一次磁盘同步的时间间隔
# 达到阀值,也将触发
# log.flush.interval.ms=None

#文件在索引中清除后保留的时间，一般不需要修改
log.delete.delay.ms=60000

#控制上次固化硬盘的时间点，以便于数据恢复，一般不需要修改
log.flush.offset.checkpoint.interval.ms=60000

# --------------------------------TOPIC相关------------------------------------
#是否允许自动创建topic，如果是false，需要通过命令创建topic
auto.create.topics.enable=true

#一个topic，默认分区的replication(副本）个数，不能大于集群中broker的个数
default.replication.factor=1

#每个topic的分区个数
num.partitions=1

# --------------------------------复制相关------------------------------------------
#分区中 leader与replicas之前通讯时，socket的超时时间
controller.socket.timeout.ms=30000

#分区中 leader与replicas数据同步时，消息的队列尺寸
controller.message.queue.size=10

#replicas响应leader的最长等待时间，如果超过这个时间，就将replicas列入ISR（in-sync replicas)，并认为它时死的，不会再加入管理
replica.lag.time.max.ms=10000

#如果follower落后与leader太多，会认为follower已经失效，会将此replicas迁移到其他follower中
replica.lag.max.messages=4000

#follower与leader之间的socket超时时间
# replica.socket.timeout.ms=30*1000

#leader复制时间的socket缓存大小
# replica.socket.receive.buffer.bytes=64*1024

#replicas每次获取数据的最大大小
# replica.fetch.max.bytes=1024*1024

#replicas与leader之前通信的最大等待时间，失败了会重试
replica.fetch.wait.max.ms=500

#fetch的最小数据尺寸，如果leader中尚未同步的数据不足此值，将会阻塞，知道满足条件
replica.fetch.min.bytes=1

#leader进行复制的线程数，增大这个数值会增加follower的IO
num.replica.fetchers=1

#每个replica检查是否将最高水位进行固化的频率
replica.high.watermark.checkpoint.interval.ms=5000

#是否允许控制器关闭broker，如果设置为true，会关闭所有在此broker上的leader，并转移到其他broker
controlled.shutdown.enable=false

#控制器关闭的尝试次数
controlled.shutdown.max.retries=3

#每次关闭尝试的时间间隔
controlled.shutdown.retry.backoff.ms=5000

#是否自动平衡broker之间的分配策略
auto.leader.rebalance.enable=false

#leader的不平衡比例，如果超过这个数值，会对分区进行重新的平衡
leader.imbalance.per.broker.percentage=10

#检查leader是否不平衡的时间间隔
leader.imbalance.check.interval.seconds=300

#客户端保留offset信息的最大空间大小
# offset.metadata.max.bytes

# --------------------------ZooKeeper相关-------------------------------
#zookeeper集群的地址，可以是多个，多个之间用逗号分割
# hostname1:port1,hostname2:port2,hostname3:port3
zookeeper.connect=zookeeper:2181

#zookeeper的最大超时时间，就是心跳间隔，如果没有反应，就认为已经死了，不易过大
zookeeper.session.timeout.ms=60000

#ZooKeeper的连接超时时间
zookeeper.connection.timeout.ms=6000

#zookeeper集群中leader和follower之间的同步时间
zookeeper.sync.time.ms=2000
